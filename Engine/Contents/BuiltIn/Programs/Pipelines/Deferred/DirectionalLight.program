#include <Programs/Pipelines/Deferred/Common.program>

struct InputData { float3 Position : POSITION; float2 UV : UV; };
struct TransformData { matrix4f Model; matrix4f View; matrix4f Projection; matrix4f MVP; };
struct VertexOutput { float4 Position : POSITION0; };
struct FragmentOutput {	float4 Color : TARGET0; };

texture2D NormalTexture;
texture2D AlbedoSpecTexture;
TransformData _TransformData;
Data data;

VertexOutput VertexMain(InputData inputData)
{
	matrix4f mat = matrix4f(
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1);

	VertexOutput o;
	o.Position = mat * float4(inputData.Position, 1);
	return o;
}

FragmentOutput FragmentMain(InputData inputData)
{
	float3 dir = Normalize(-data.Direction);
	float3 normal = Sample(NormalTexture, inputData.UV).rgb;
	float angle = Max(Dot(normal, dir), 0.0);
	float3 diffuse = Sample(AlbedoSpecTexture, inputData.UV).rgb;

	FragmentOutput o;
	o.Color = float4(diffuse * data.Color.rgb * data.Strength * angle, 1);
	return o;
}
