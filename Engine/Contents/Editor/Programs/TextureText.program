#include <Includes/Utilities.program>

struct InputData { float3 Position : POSITION; float2 UV : UV; };
struct TransformData { matrix4f Model; matrix4f View; matrix4f Projection; matrix4f MVP; };
struct Data { float4 FontTextureBound; float4 Color; };
struct VertexOutput { float4 Position : POSITION0; };
struct FragmentOutput {	float4 Color : TARGET0; };

texture2D FontTexture;
TransformData _TransformData;
Data data;

VertexOutput VertexMain(InputData inputData)
{
	VertexOutput o;
	o.Position = _TransformData.MVP * float4(inputData.Position, 1);
	return o;
}

FragmentOutput FragmentMain(InputData inputData)
{
	float2 finalUV;
	finalUV.x = Map(inputData.UV.x, 0, 1, data.FontTextureBound.x, data.FontTextureBound.x + data.FontTextureBound.z, 1);
	finalUV.y = 1 - Map(inputData.UV.y, 0, 1, data.FontTextureBound.y, data.FontTextureBound.y + data.FontTextureBound.w, 1);

	FragmentOutput o;
	o.Color = data.Color * Sample(FontTexture, finalUV).r;
	return o;
}