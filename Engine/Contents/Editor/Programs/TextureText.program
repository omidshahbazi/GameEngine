#include <ShaderIncludes.program>

struct InputData { float3 Position : POSITION; float2 UV : TEXCOORD; };
struct TransformData { matrix4 Model; matrix4 View; matrix4 Projection; matrix4 MVP; };
struct Data { float4 FontTextureBound; float4 Color; };

texture2D FontTexture;
TransformData _TransformData;
Data data;

float4 VertexMain(InputData inputData)
{
	return _TransformData.MVP * float4(inputData.Position, 1);
}

float4 FragmentMain(InputData inputData)
{
	float2 finalUV;
	finalUV.x = Map(inputData.UV.x, 0, 1, data.FontTextureBound.x, data.FontTextureBound.x + data.FontTextureBound.z, 1);
	finalUV.y = 1 - Map(inputData.UV.y, 0, 1, data.FontTextureBound.y, data.FontTextureBound.y + data.FontTextureBound.w, 1);
	return data.Color * Sample(FontTexture, finalUV).r;
}